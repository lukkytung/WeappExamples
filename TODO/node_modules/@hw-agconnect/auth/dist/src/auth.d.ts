import { AGCAuth, AGConnectAuthCredential, AGConnectUser, Persistence, SignInResult, PhoneUser, EmailUser, OnTokenListener, Crypt, VerifyCodeResult } from '@hw-agconnect/auth-types';
import { Logger } from "@hw-agconnect/log";
declare let authLogger: Logger;
declare class AGCAuthImpl implements AGCAuth {
    private persistence;
    private cryptImpl;
    private identifier;
    private authBackend;
    private storedUserManager;
    private verifyCodeRequestService;
    constructor(identifier: string);
    createEmailUser(emailUser: EmailUser): Promise<SignInResult>;
    createPhoneUser(phoneUser: PhoneUser): Promise<SignInResult>;
    signIn(credential: AGConnectAuthCredential): Promise<SignInResult>;
    private getUserWithCredential;
    deleteUser(): Promise<void>;
    signOut(): Promise<void>;
    getCurrentUser(): Promise<AGConnectUser | null>;
    signInAnonymously(): Promise<SignInResult>;
    getUserWithAnonymously(): Promise<SignInResult>;
    requestEmailVerifyCode(email: string, action: number, lang: string, sendInterval: number): Promise<VerifyCodeResult>;
    requestPhoneVerifyCode(countryCode: string, phoneNumber: string, action: number, lang: string, sendInterval: number): Promise<VerifyCodeResult>;
    setUserInfoPersistence(persistence: Persistence): void;
    getUserInfoPersistence(): Persistence;
    setCryptImp(cryptImpl: Crypt): boolean;
    getCryptImp(): any;
    addTokenListener(listener: OnTokenListener): void;
    removeTokenListener(listener: OnTokenListener): void;
    resetPasswordByEmail(email: string, newPassword: string, verifyCode: string): Promise<void>;
    resetPasswordByPhone(countryCode: string, phoneNumber: string, newPassword: string, verifyCode: string): Promise<void>;
}
export { authLogger, AGCAuthImpl };
