import { SubScribeRange } from '../sync/NaturalCloudSyncModule';
import { TransactionData } from '../sync/request/TransactionRequest';
import { NaturalStore } from '../base/NaturalStore';
import { ErrorCode } from '../utils/ErrorCode';
import { EncryptionStatusMonitor } from '../sync/EncryptionStatusMonitor';
import { EncryptInfo, EncryptResult } from '../sync/utils/EncryptInfo';
import { NaturalBaseRef } from '../base/NaturalBaseRef';
import { ServerStatus } from '../CloudDBZone';
export declare class NaturalCloudStorage {
    private readonly naturalCloudSyncModule;
    constructor(naturalBaseRef: NaturalBaseRef);
    executeUpsert(objects: any[], naturalStoreName: string): Promise<number>;
    executeDelete(objects: any[], naturalStoreName: string): Promise<number>;
    executeQuery<T>(naturalStoreName: string, schemaName: string, queryCondition: string): Promise<T[]>;
    executeAggregateQuery(naturalStoreName: string, schemaName: string, queryCondition: string): Promise<number>;
    runTransaction(storeName: string, verifyObjects: any[], operatorObjects: TransactionData[]): Promise<void>;
    unsubscribeForRekey(): Promise<ErrorCode>;
    subscribeForRekey(): Promise<ErrorCode>;
    onSubscribe(subscribeType: SubScribeRange, store?: NaturalStore, defaultSubscribeInfo?: [number, string, string], isResubscribe?: boolean): Promise<ErrorCode>;
    onUnSubscribe(subscribeType: SubScribeRange, store?: NaturalStore, defaultSubscribeInfo?: [number, string, number, string]): Promise<ErrorCode>;
    needToDisconnectWebsocket(): boolean;
    disconnectWebSocket(): Promise<void>;
    addEncryptionListener(encryptionStatusMonitor: EncryptionStatusMonitor): Promise<void>;
    querySaltValue(): Promise<EncryptResult>;
    queryDataKeyCipherText(requestInfo: EncryptInfo): Promise<EncryptResult>;
    insertEncryptedInfo(insertEncryptInfo: EncryptInfo): Promise<EncryptResult>;
    updateEncryptedInfo(oldEncryptInfo: EncryptInfo, newEncryptInfo: EncryptInfo): Promise<EncryptResult>;
    executeServerStatusQuery(): Promise<ServerStatus>;
}
