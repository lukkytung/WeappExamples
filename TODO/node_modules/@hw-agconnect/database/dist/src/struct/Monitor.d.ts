export declare type Condition<T> = (state: State<T>) => boolean;
export declare type Executor<T> = (state: State<T>) => void;
export declare class State<T> {
    private value_;
    private actions;
    constructor(value?: T);
    get value(): T | undefined;
    set value(value: T | undefined);
    register(action: Action<T>): void;
    unregister(id: string): void;
    hasNoAction(): boolean;
    release(): void;
}
export declare class Action<T> {
    readonly id: string;
    readonly isOnce: boolean;
    private func;
    private condition;
    private isTimeout;
    private executed;
    private isRegistered;
    constructor(isOnce: boolean, func: Executor<T>, id: string, condition?: Condition<T>);
    get isExecuted(): boolean;
    isMeetCondition(state: State<T>): boolean;
    withTimeout(duration: number, handle?: () => void): this;
    execute(state: State<T>): void;
    private executeAndTryUnregister;
}
