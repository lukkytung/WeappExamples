import { CloudDBZone } from './CloudDBZone';
import { CloudDBZoneConfig } from './CloudDBZoneConfig';
import { AGConnectServicesConfig, AGCRoutePolicy } from '@hw-agconnect/instance-types';
export declare type ObjectTypeInfo = {
    schemaVersion: number;
    permissions: any;
    objectTypes: any;
};
export declare enum EventType {
    USER_KEY_CHANGED = 0
}
export declare class AGConnectCloudDB {
    private static sAGConnectCloudDB;
    private static CLOUDDB_MAP;
    private naturalBase;
    private isCreateObjectTypeSuccess;
    private constructor();
    static initialize(agconnectServiceConfig: AGConnectServicesConfig): void;
    static getInstance(agcRoutePolicy?: AGCRoutePolicy): AGConnectCloudDB;
    createObjectType(objectTypeInfo: ObjectTypeInfo): void;
    openCloudDBZone(config: CloudDBZoneConfig): Promise<CloudDBZone>;
    closeCloudDBZone(cloudDBZone: CloudDBZone): void;
    setUserKey(userKey: string, userReKey: string, needStrongCheck?: boolean): Promise<boolean>;
    addEventListener(eventListener: EventListener): Promise<void>;
    private validateCloudDBZone;
}
export interface EventListener {
    onEvent(eventType: EventType): void;
}
