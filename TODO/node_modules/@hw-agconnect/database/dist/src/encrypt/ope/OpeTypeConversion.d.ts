import { BigNumSpace } from './Utils/BigNumSpace';
import { Uint64Space } from './Utils/Uint64Space';
export declare class OpeTypeConversion {
    private static readonly NUMBER_RADIX_DECIMAL;
    private static readonly NUMBER_RADIX_DECIMAL_LOG2;
    private static readonly INT8_DEFAULT_DIGIT;
    private static readonly INT16_DEFAULT_DIGIT;
    private static readonly INT32_DEFAULT_DIGIT;
    private static readonly INT64_DEFAULT_DIGIT;
    private static readonly INT8_NEGATIVE_EDGE;
    private static readonly INT16_NEGATIVE_EDGE;
    private static readonly INT32_NEGATIVE_EDGE;
    private static readonly INT64_NEGATIVE_EDGE;
    private static readonly FLOAT_DEFAULT_PRECISION;
    private static readonly FLOAT_EXPONENT_MAX_RANGE;
    private static readonly FLOAT_EXPONENT_MAX_LEN;
    private static readonly DOUBLE_DEFAULT_PRECISION;
    private static readonly DOUBLE_EXPONENT_MAX_RANGE;
    private static readonly DOUBLE_EXPONENT_MAX_LEN;
    private static readonly PLAIN_TEXT_REDUNDANCY;
    private static readonly PLAIN_TEXT_REDUNDANCY_LOG2;
    private static readonly CIPHER_SPACE_RATE;
    private static readonly CIPHER_SPACE_RATE_BASE;
    private static readonly CIPHER_SPACE_LIMIT;
    private static readonly CIPHER_SPACE_LIMIT_LOG2;
    private static readonly STRING_VALID_BYTE_LEN;
    private static readonly CHAR_SPACE_SIZE;
    private static readonly FLOAT_VALID_DIGITS;
    private static readonly DOUBLE_VALID_DIGITS;
    static readonly OPE_FAIL = -1;
    static readonly OPE_SUCCESS = 1;
    static convertToOpeDataSpaceUint64(input: string, type: number, uint64Space: Uint64Space): number;
    static convertToOpeDataSpaceBigNum(input: Uint8Array | string, inLen: number, type: number, bigNumSpace: BigNumSpace): number;
    private static convertInt8ToOpeDataSpace;
    private static convertInt16ToOpeDataSpace;
    private static convertInt32ToOpeDataSpace;
    private static convertInt64ToOpeDataSpace;
    private static convertFloatToOpeDataSpace;
    private static convertDoubleToOpeDataSpace;
    private static convertStringToOpeDataSpace;
    private static convertFloatToUint64;
    private static convertDoubleToBigNum;
    private static convertCharToBigNum;
    private static calculateFloatingPointParameter;
    private static calculateNormalizedExp;
    private static translateFloatingPointToChar;
    private static convertToUint64Space;
    private static convertToBigNumSpace;
    private static convertToBigNumSpaceWithoutOutSize;
    private static setBitLenToOneInBigNum;
}
