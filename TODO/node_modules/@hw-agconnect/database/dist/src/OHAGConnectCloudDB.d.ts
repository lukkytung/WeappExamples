import '@hw-agconnect/core-ohos';
import '@hw-agconnect/credential-ohos';
import { AGConnectServicesConfig } from '@hw-agconnect/core-types-ohos';
import { AGCRoutePolicy } from '@hw-agconnect/core-ohos';
import { CloudDBZoneConfig } from './CloudDBZoneConfig';
import { CloudDBZone } from './CloudDBZone';
export declare type CloudDBConfig = {
    context: any;
    objectTypeInfo?: ObjectTypeInfo;
    agconnectServiceConfig?: AGConnectServicesConfig;
    agcRoutePolicy?: AGCRoutePolicy;
};
export declare type ObjectTypeInfo = {
    schemaVersion: number;
    permissions: any;
    objectTypes: any;
};
export declare enum EventType {
    USER_KEY_CHANGED = 0
}
export declare class OHAGConnectCloudDB {
    private static applicationContext;
    private static sAGConnectCloudDB;
    private static CLOUDDB_MAP;
    private naturalBase;
    private isCreateObjectTypeSuccess;
    private constructor();
    static initialize(context: any, agconnectServiceConfig?: AGConnectServicesConfig): Promise<void>;
    static getInstance(policyOrConfig?: AGCRoutePolicy | CloudDBConfig): Promise<OHAGConnectCloudDB>;
    createObjectType(objectTypeInfo: ObjectTypeInfo): void;
    openCloudDBZone(config: CloudDBZoneConfig | string): Promise<CloudDBZone>;
    closeCloudDBZone(cloudDBZone: CloudDBZone): void;
    setUserKey(userKey: string, userReKey: string, needStrongCheck?: boolean): Promise<boolean>;
    addEventListener(eventListener: EventListener): Promise<void>;
    private validateCloudDBZone;
}
export interface EventListener {
    onEvent(eventType: EventType): void;
}
