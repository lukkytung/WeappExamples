import { DataModelHelper } from './base/DataModelHelper';
import { NaturalStore } from './base/NaturalStore';
import { CloudDBZoneQuery } from './CloudDBZoneQuery';
import { CloudDBZoneSnapshot } from './CloudDBZoneSnapshot';
import { ListenerHandler } from './ListenerHandler';
import { OnSnapshotListener } from './OnSnapshotListener';
import { TransactionFunction } from './Transaction';
export declare class ServerStatus {
    serverTimestamp: number;
}
export declare class CloudDBZone {
    private static listenerId;
    private naturalStore;
    private zoneName;
    private readonly listenerHandlers;
    readonly zoneId: string;
    private callback;
    constructor(zoneId: string, zoneName: string, naturalStore: NaturalStore);
    get cloudDBZoneName(): string;
    executeServerStatusQuery(): Promise<ServerStatus>;
    subscribeSnapshot<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>, listener: OnSnapshotListener<T>): Promise<ListenerHandler>;
    private checkListener;
    hasSnapshot(): boolean;
    executeUpsert<T>(objectList: T[] | T): Promise<number>;
    private validateObjectType;
    private calculateObjectListSize;
    executeDelete<T>(objectList: T[] | T): Promise<number>;
    private validateObjectList;
    executeQuery<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>): Promise<CloudDBZoneSnapshot<T>>;
    executeAverageQuery<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>, fieldName: string): Promise<number>;
    runTransaction(transactionFunction: TransactionFunction): Promise<boolean>;
    private checkTransactionFunction;
    private getCloudDBZoneResult;
    private handleUnrecoverableException;
    private verifyTransaction;
    private verifyTransactionData;
    private verifyTransactionListLength;
    private getTransactionResult;
    private checkCloudDBZoneHandle;
    private isValidOperation;
    private checkQuickGamePlatform;
    getNaturalStore(): NaturalStore;
    getDataModelHelper(): DataModelHelper;
}
