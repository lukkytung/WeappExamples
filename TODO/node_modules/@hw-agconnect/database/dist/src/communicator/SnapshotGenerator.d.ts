import { CloudDBZoneSnapshot } from '../CloudDBZoneSnapshot';
import { State } from '../struct/Monitor';
import { ObjectWrapper } from '../sync/ObjectWrapper';
import { ServerPushOperationType } from '../sync/utils/MessageType';
import { CloudDBZoneQuery } from '../CloudDBZoneQuery';
import { ErrorCode } from '../utils/ErrorCode';
import { NaturalBaseRef } from '../base/NaturalBaseRef';
export declare class SnapshotGenerator<T> {
    private readonly snapshotVersionIds;
    private readonly upsertedVersionIds;
    private readonly deletedVersionIds;
    private readonly naturalBaseRef;
    private snapshotCache;
    private version;
    private clz;
    private cloudDBZoneQuery;
    private taskQueue;
    constructor(clz: new () => T, cloudDBZoneQuery: CloudDBZoneQuery<T>, naturalBaseRef: NaturalBaseRef);
    initialize(primaryKeys: string[]): void;
    getVersion(): State<number>;
    increaseVersion(): void;
    cacheSnapshotObjects(pushedData: unknown[], errorCode: ErrorCode, operationType?: ServerPushOperationType): void;
    private processPushData;
    private handleIncrementalData;
    private handlePushAllData;
    private clearSnapshotVersionIds;
    generateSnapshot(clz: new () => T, isFirstSnapshot: boolean): CloudDBZoneSnapshot<T>;
    private buildSnapshotObjects;
    getSnapshotCache(): ObjectWrapper[];
    getSnapshotCacheVersionIds(): Map<string, number>;
    private generateRecord;
}
