import { DefaultNaturalStore } from './DefaultNaturalStore';
import { NaturalStore } from './NaturalStore';
import { CertificateService } from '../security/CertificateService';
import { EventListener, ObjectTypeInfo } from '../AGConnectCloudDB';
import { ErrorCode } from '../utils/ErrorCode';
import { NaturalCloudStorage } from '../storage/NaturalCloudStorage';
import { EntireEncryption } from '../encrypt/EntireEncryption';
import { EntireEncryptInterval } from '../encrypt/EntireEncryptInterval';
import { NaturalBaseRef } from './NaturalBaseRef';
import { DataModelHelper } from './DataModelHelper';
export declare type NaturalStoreResult = {
    naturalStore: NaturalStore | undefined;
    exceptionCode: ErrorCode;
};
export declare class NaturalBase implements NaturalBaseRef {
    naturalStoreMap: Map<string, NaturalStore>;
    private defaultNStore;
    private isUserKeyValid;
    private onEventListener;
    private monitor?;
    private readonly cloudStorage;
    private readonly secretKeyManager;
    private readonly entireEncryptInterval;
    private readonly certificateService;
    constructor(agcRoutePolicy?: any);
    getNaturalStore(storeName?: string): NaturalStore | undefined;
    getAllNaturalStore(): NaturalStore[];
    createObjectType(objectTypeInfo: ObjectTypeInfo): ErrorCode;
    openNaturalStore(zoneName: string): Promise<NaturalStoreResult>;
    tryCloseNaturalStore(zoneId: string, zoneName: string): void;
    setUserKey(userKey: string, userReKey: string, needStrongCheck: boolean): Promise<boolean>;
    addOnEventListener(eventListener: EventListener): Promise<void>;
    private addEncryptionMonitor;
    onConnect(): Promise<void>;
    private validateSchemaInput;
    private convert;
    getDataModelHelper(): DataModelHelper;
    getDefaultNaturalStore(): DefaultNaturalStore;
    getEntireEncryptInterval(): EntireEncryptInterval;
    getEntireEncryption(): EntireEncryption;
    getNaturalCloudStorage(): NaturalCloudStorage;
    getCertificateService(): CertificateService;
}
