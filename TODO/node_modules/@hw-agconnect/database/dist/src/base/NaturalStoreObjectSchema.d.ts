import { FieldInfo } from '../query/FieldInfo';
import { UserRight, UserRole } from '../utils/SchemaNamespace';
export declare enum TableCompare {
    MORE_TABLES = 1,
    LESS_TABLES = 2,
    EQUAL_TABLES = 3,
    DIFF_TABLES = 4
}
export declare enum FieldCompare {
    MORE_FIELDS = 1,
    LESS_FIELDS = 2,
    EQUAL_FIELDS = 3,
    DIFF_FIELDS = 4,
    INVALID_INDEX = 5,
    INVALID_SCHEMA = 6
}
export declare class NaturalStoreObjectSchema {
    private name_;
    private primaryKeyList;
    private fieldInfos;
    private permissions;
    constructor(sPermission?: any, sObjectType?: any);
    get name(): string;
    static validateObjectSchema(schema: NaturalStoreObjectSchema): boolean;
    compareFields(schema: NaturalStoreObjectSchema | undefined): FieldCompare;
    private compareFieldInfo;
    getFieldInfo(name: string): FieldInfo | undefined;
    checkPermission(role: UserRole, right: UserRight): boolean;
    getPrimaryKeys(): string[];
    getPrimaryKeyFieldTypes(): FieldInfo[];
    getFieldNames(): string[];
    hasCompositePrimaryKey(): boolean;
    getFieldInfos(): Map<string, FieldInfo>;
    setPermission(role: UserRole, right: UserRight): void;
    isLegalOpeFieldName(opeFieldName: string): boolean;
    isEncryptTable(): boolean;
    getEncryptFieldList(): FieldInfo[];
}
