import { CloudDBZoneQuery } from '../CloudDBZoneQuery';
import { SubscribeManager } from '../sync/SubscribeManager';
import { OnSnapshotListener } from '../OnSnapshotListener';
import { ErrorCode } from '../utils/ErrorCode';
import { NaturalBaseRef } from './NaturalBaseRef';
export declare class ListenerManager {
    private listenerCount;
    private queryId;
    private readonly subscribeInfoMap;
    private readonly queryHashMap;
    private readonly listenerIdMap;
    private readonly naturalBaseRef;
    private readonly naturalStoreName;
    constructor(naturalBaseRef: NaturalBaseRef, naturalStoreName: string);
    private generateSignature;
    hasListener(listenerId?: number): boolean;
    addListener<T>(query: CloudDBZoneQuery<T>, queryCondition: string, listener: OnSnapshotListener<T>, listenerId: number): Promise<ErrorCode>;
    removeListener(listenerId: number): Promise<ErrorCode>;
    cleanSubscribeInfo(subRecordId: string): void;
    private cleanSubscription;
    getAllSubscribeInfo(): Map<number, SubscribeManager<unknown>>;
    getSubscribeInfoByRecordId(cloudSubRecordId: string): SubscribeManager<unknown> | undefined;
    isSubscribeNotResponsed(queryId: number): boolean;
    getSubscribeInfo(queryId: number): SubscribeManager<unknown> | undefined;
    private compareValue;
}
