import { AggregateType, CloudDBZoneQuery, Condition } from '../CloudDBZoneQuery';
import { CloudDBZoneSnapshot } from '../CloudDBZoneSnapshot';
import { SubscribeManager } from '../sync/SubscribeManager';
import { OnSnapshotListener } from '../OnSnapshotListener';
import { Operation } from '../TransactionImpl';
import { ErrorCode } from '../utils/ErrorCode';
import { NaturalBaseRef } from './NaturalBaseRef';
import { DataModelHelper } from './DataModelHelper';
import { ServerPushOperationType } from '../sync/utils/MessageType';
import { ServerStatus } from '../CloudDBZone';
export declare class NaturalStore {
    readonly naturalStoreId: string;
    readonly references: Set<string>;
    private listenerManager;
    private readonly cloudStorage;
    private readonly naturalBaseRef;
    constructor(naturalStoreId: string, naturalBaseRef: NaturalBaseRef);
    releaseNaturalStoreResource(): void;
    getNaturalStoreName(): string;
    close(): void;
    hasSubscriber(): boolean;
    executeUpsert(objects: any[]): Promise<number>;
    executeDelete(objects: any[]): Promise<number>;
    executeQuery<T>(query: CloudDBZoneQuery<T>): Promise<CloudDBZoneSnapshot<T>>;
    executeTransactionQuery<T>(query: CloudDBZoneQuery<T>): Promise<any>;
    executeAggregateQuery<T>(query: CloudDBZoneQuery<T>, aggregateType: AggregateType, fieldName: string): Promise<number>;
    executeServerStatusQuery(): Promise<ServerStatus>;
    runTransaction(zoneName: string, needVerifyObjects: any[], transactionList: Array<Operation>): Promise<void>;
    addSnapshotListener<T>(query: CloudDBZoneQuery<T>, listener: OnSnapshotListener<T>, listenerId: number): Promise<ErrorCode>;
    removeSnapshotListener(listenerId: number): Promise<ErrorCode>;
    getAllSubscribeInfo(): Map<number, SubscribeManager<any>>;
    getSubscribeInfoByCloudSubRecordId(cloudSubRecordId: string): SubscribeManager<any> | undefined;
    isSubscribeNotResponsed(queryId: string): boolean;
    handleSubscribeRes(subscribeResult: ErrorCode, queryId: number, cloudSubRecordId: string, cloudSubKey: number): ErrorCode;
    handleUnsubscribeRes(subRecordId: string, errorCode: number): ErrorCode;
    handleSubPushRes<T>(subscribeInfo: SubscribeManager<T>, errorCode: ErrorCode, pushedData?: any[], operationType?: ServerPushOperationType): void;
    getQueryConditionByString(schemaName: string, queryConditions: Condition[]): Promise<string>;
    private arrayToString;
    private isInvalidCondition;
    private getTransactionOperation;
    getAllSubscribeInfos(): [number, string, number, string][];
    private verifyAvgQuery;
    checkQueryClass<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>): void;
    private checkConditions;
    private checkConditionTypeAndFieldType;
    private checkSubscribeQuery;
    private checkSubscribeCondition;
    private checkSubscribeConditionSize;
    private checkSubscribeConditionType;
    getDataModelHelper(): DataModelHelper;
    private validOrAndCondition;
    private validBeginOrEndGroup;
    private addCondition;
}
