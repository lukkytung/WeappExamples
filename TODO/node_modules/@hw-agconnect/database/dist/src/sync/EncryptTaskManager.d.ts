import Long from 'long';
import { CallbackTask } from './utils/CallbackTask';
import { SyncRequestProcessor } from './SyncRequestProcessor';
import { EncryptionStatusMonitor } from './EncryptionStatusMonitor';
import { EncryptInfo, EncryptResult } from './utils/EncryptInfo';
import { MessageSubType } from './utils/MessageType';
import { NaturalBaseRef } from '../base/NaturalBaseRef';
export declare class EncryptTaskManager {
    private static ENCRYPT_TASK_TIMEOUT_IN_MILLISECOND;
    private encryptTaskCacheMap;
    private syncProcess;
    private readonly naturalBaseRef;
    constructor(syncProcess: SyncRequestProcessor, naturalBaseRef: NaturalBaseRef);
    clearEncryptInfo(encryptInfoArray: EncryptInfo[]): void;
    addEncryptionListener(encryptionStatusMonitor: EncryptionStatusMonitor): Promise<void>;
    tryToDisconnectWhenClearUserKey(): void;
    private processEncryptionTask;
    private onEncryptTask;
    querySaltValue(): Promise<EncryptResult>;
    queryDataKeyCipherText(requestInfo: EncryptInfo): Promise<EncryptResult>;
    insertEncryptedInfo(insertEncryptInfo: EncryptInfo): Promise<EncryptResult>;
    updateEncryptedInfo(oldEncryptInfo: EncryptInfo, newEncryptInfo: EncryptInfo): Promise<EncryptResult>;
    private handleEncryptTaskResult;
    private handleEncryptPushMessage;
}
export declare class EncryptTask extends CallbackTask {
    private requestSubType_;
    private taskId_;
    private resultCode_;
    private requestInfo_;
    constructor(requestSubType: MessageSubType, taskId: Long, requestInfo: EncryptInfo[]);
    get requestSubType(): number;
    set requestSubType(requestSubType: number);
    get taskId(): Long;
    get resultCode(): number;
    set resultCode(code: number);
    get requestInfo(): EncryptInfo[];
    clearRequestInfo(): void;
}
