import { CloudDBZoneQuery } from '../CloudDBZoneQuery';
import { OnSnapshotListener } from '../OnSnapshotListener';
import { ErrorCode } from '../utils/ErrorCode';
import { ObjectWrapper } from './ObjectWrapper';
import { NaturalBaseRef } from '../base/NaturalBaseRef';
import { ServerPushOperationType } from './utils/MessageType';
export declare class SubscribeManager<T> {
    readonly cloudDBZoneQuery: CloudDBZoneQuery<T>;
    readonly queryId: number;
    readonly conditionSignature: string;
    readonly naturalStoreName: string;
    private readonly naturalBaseRef;
    private snapshotGenerator;
    private exceptionCode;
    cloudSubRecordId: string;
    cloudSubKey: number;
    pushSeq: number;
    constructor(queryId: number, conditionSignature: string, naturalStoreName: string, cloudDBZoneQuery: CloudDBZoneQuery<T>, naturalBaseRef: NaturalBaseRef);
    initialize(primaryKeys: string[]): void;
    addListener(listenerId: number, listener: OnSnapshotListener<T>): void;
    removeListener(listenerId: number): boolean;
    subscribe(queryCondition: string): Promise<void>;
    unsubscribe(): Promise<void>;
    notify(errorCode: ErrorCode, pushedData?: unknown[], operationType?: ServerPushOperationType): void;
    isErrorStatus(): boolean;
    getSnapshotCache(): ObjectWrapper[];
}
