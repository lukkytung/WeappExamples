import { NaturalStore } from '../base/NaturalStore';
import { SyncTaskHandler } from './SyncTaskHandler';
import { AggreResult } from './request/SyncResult';
import { TransactionData } from './request/TransactionRequest';
import { ErrorCode } from '../utils/ErrorCode';
import { EncryptTaskManager } from './EncryptTaskManager';
import { NaturalBaseRef } from '../base/NaturalBaseRef';
import { ServerStatus } from '../CloudDBZone';
export declare enum SubScribeRange {
    ALL_STORE = 1,
    STORE = 2,
    DEFAULT_SUBSCRIBE = 3
}
export declare class NaturalCloudSyncModule implements SyncTaskHandler {
    private subTunnelFail;
    private isInitiativeStop;
    private syncInstance;
    private readonly encryptTaskManager;
    private readonly naturalBaseRef;
    constructor(naturalBaseRef: NaturalBaseRef);
    private getSubscribeInfos;
    private getSubInfoByRange;
    private getUnSubInfoByRange;
    private onConnect;
    subscribeForRekey(): Promise<ErrorCode>;
    unsubscribeForRekey(): Promise<ErrorCode>;
    private onDisconnect;
    disconnectWebSocket(): Promise<void>;
    needToDisconnectWebsocket(): boolean;
    private handleQuerySubRes;
    private handleQueryUnsubRes;
    private handleQuerySubPushRes;
    private handlePushWithQueryId;
    onQuery(storeName: string, tableName: string, query: string): Promise<any[]>;
    onAggregateQuery(storeName: string, tableName: string, query: string): Promise<AggreResult>;
    private createSyncQueryRequest;
    onUpsert(storeName: string, data: any[]): Promise<number>;
    onDelete(storeName: string, data: any[]): Promise<number>;
    private createSyncObjectRequest;
    private buildSchemas;
    private processCRUDRequest;
    onSubscribe(subscribeType: SubScribeRange, store?: NaturalStore, defaultSubscribeInfo?: [number, string, string], isResubscribe?: boolean): Promise<ErrorCode>;
    private buildSubscribeData;
    private processSubRequest;
    onUnSubscribe(subscribeType: SubScribeRange, store?: NaturalStore, defaultSubscribeInfo?: [number, string, number, string]): Promise<ErrorCode>;
    private createUnSubscribeRequest;
    private checkStatus;
    onTransaction(storeName: string, verifyObjects: any[], operations: TransactionData[]): Promise<void>;
    private createTransactionRequest;
    getEncryptTaskManager(): EncryptTaskManager;
    onServerStatusQuery(): Promise<ServerStatus>;
}
