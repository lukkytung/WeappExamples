import Long from 'long';
import { WebSocketClient } from '../communicator/websocket/WebSocketClient';
import { CertificateService } from '../security/CertificateService';
import { SyncMessageType } from './utils/EntityTemplate';
import { SyncResult } from './request/SyncResult';
import { ErrorCode } from '../utils/ErrorCode';
import { SyncTask } from './task/SyncTask';
export declare class SyncRequestProcessor {
    private static taskId;
    private static traceId?;
    private webSocketResponse;
    private taskMap;
    private communicateTaskQueue;
    private subscribeTaskIdSet;
    private subscribeRecordSet;
    private encryptionInfoPush?;
    private certificateService;
    private webSocketClient;
    static generateTaskId(): Long;
    static setTraceId(traceId?: string): any;
    static generalTraceId(): string;
    constructor(certificateService: CertificateService);
    registerConnectCallback(connectCallback: any): void;
    registerDisconnectCallback(disconnectCallback: any): void;
    registerWebSocketCallBack(syncMessageType: SyncMessageType, task: any): void;
    process(syncTask: SyncTask): void;
    private verifyRequest;
    onWebSocketResponse(isSuccess: boolean, message: any): void;
    getSubscribeTaskIdSet(): Set<string>;
    getSubscribeRecordSet(): Set<string>;
    clearSubscriber(): void;
    hasSubscriber(): boolean;
    needToDisconnectWebsocket(): boolean;
    needToConnectWebSocket(): boolean;
    disConnectWebSocket(): Promise<void>;
    tryToDisconnectWebsocket(): void;
    addEncryptStatusMonitor(encryptionStatusMonitor: (ExceptionCode: ErrorCode, syncResult: SyncResult) => any): void;
    getEncryptionInfoPush(): ((ExceptionCode: ErrorCode, syncResult: SyncResult) => any) | undefined;
    getWebSocketClient(): WebSocketClient;
}
