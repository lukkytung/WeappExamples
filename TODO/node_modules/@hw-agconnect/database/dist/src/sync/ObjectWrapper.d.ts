import { naturalcloudsyncv2 } from '../generated/syncmessage';
import { OperationType, ServerPushOperationType } from './utils/MessageType';
import { TransactionData } from './request/TransactionRequest';
import Schema = naturalcloudsyncv2.Schema;
import OperationData = naturalcloudsyncv2.OperationData;
import SyncRequestMessage = naturalcloudsyncv2.SyncRequestMessage;
export declare class ObjectWrapper {
    readonly creator: string | null | undefined;
    readonly objectVersion: number | undefined;
    objectTypeName: string;
    private userObject?;
    readonly schema?: naturalcloudsyncv2.Schema;
    private readonly values;
    readonly operationType?: ServerPushOperationType;
    constructor(schema: Schema, fields: naturalcloudsyncv2.Field[], operationType?: number);
    static findSchemaIndex(schemas: naturalcloudsyncv2.ISchema[], schemaName: string): [number, Schema];
    static addSystemSchemaField(schema: Schema): void;
    static buildObjs(data: any[], schemas: naturalcloudsyncv2.ISchema[], isDelete: boolean): naturalcloudsyncv2.Obj[];
    static buildVerifyObjs(verifyObj: ObjectWrapper[], schemas: Schema[]): naturalcloudsyncv2.Obj[];
    static buildTransactionData(requestMessage: SyncRequestMessage, transactionData: TransactionData[], schemas: Schema[]): void;
    static buildOperationData(objs: naturalcloudsyncv2.Obj[], operationType: OperationType): OperationData[];
    static groupBy(datas: naturalcloudsyncv2.Obj[], key: string): naturalcloudsyncv2.Obj[][];
    static buildSubObjs(data: ObjectWrapper[], schema: naturalcloudsyncv2.ISchema): naturalcloudsyncv2.Obj[];
    private static buildObj;
    private static isNullValue;
    static getClassName<T extends object>(record: T): string;
    toSyncObject(): naturalcloudsyncv2.Obj;
    setObjectTypeName<T>(clz: new () => T): void;
    getUserObject(): any;
    setUserObject(object: any): void;
    getObject(): object;
    clone(): ObjectWrapper;
    isValidVersion(): boolean;
}
export declare const DataTypeMap: Map<any, any>;
