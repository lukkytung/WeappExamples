import { WebSocketTask } from './WebSocketTask';
import { ErrorCode } from '../../utils/ErrorCode';
import { SyncResult } from '../request/SyncResult';
import { EncryptRequest } from '../request/EncryptRequest';
import { SyncRequestProcessor } from '../SyncRequestProcessor';
export declare class MonitorTask extends WebSocketTask {
    private userCommandMonitorResponse;
    private userKeyMonitorResponse;
    constructor(syncRequest: EncryptRequest, keyVersion: number, handle: (errorCode: ErrorCode, syncResult: SyncResult) => any, syncProcessor: SyncRequestProcessor);
    onResponse(response: any, result: any, syncProcessor?: SyncRequestProcessor): void;
    request(): void;
    commandMonitor(syncRequest: any, callback: any): void;
    userKeyMonitor(syncRequest: any, callback: any): void;
}
